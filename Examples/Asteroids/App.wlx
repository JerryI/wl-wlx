
(* /**************************** Players *********************************/ *)

players = <||>;
EventHandler["game", {
   "Add player" -> Function[data,
      Echo["Add player from socket"];
      With[{cli = data["Client"]},
         players[cli] = data;
      ]
   ],

   "Remove player" -> Function[data,
      Echo["Remove player"];
      With[{cli = data["Client"]},
         players[cli] = .;
      ]
   ],

   _ -> Null
}];

(* /**************************** Projectiles *********************************/ *)

globalProjectiles = {};
calculateProjectile[] := With[{},
   globalProjectiles = calculateProjectile /@ globalProjectiles;
   EventFire["game", UpdateProjectiles, Null];
]

time = 0.;

calculateProjectile[any_] := any;
calculateProjectile[Projectile[pos_, vel_, lifetime_]] := Module[{newVel = vel},
   If[lifetime < 0, Return[Nothing]];

   Do[
      If[Norm[p["Target"] - pos] < 0.1, 
         newVel = 1.3 Norm[vel] (Normalize[pos - p["Target"]]);
         Break[];
      ];
   , {p, players}];

   Do[
      If[Norm[p[[1]] - pos] < 0.1, 
         newVel = 1.3 Norm[vel] (Normalize[pos - p[[1]]]);
         Break[];
      ];
   , {p, globalEnemies}];   

   Projectile[pos + 0.4 (newVel) (0.4 + 0.1 Sin[time]), newVel, lifetime - 0.01]
]


(* /**************************** Enemies *********************************/ *)

globalEnemies = {};
calculateEnemies[] := With[{},
   globalEnemies = calculateEnemies /@ globalEnemies;
   EventFire["game", UpdateEnemies, Null];
]

decreaseLife[life_] := (life = life - 0.1);
SetAttributes[decreaseLife, HoldFirst];

calculateEnemies[any_] := any;
calculateEnemies[Enemy[pos_, life_]] := Module[{newLife = life},
   If[life < 0, Return[Nothing]];
   If[pos[[2]] < -1, Return[Enemy[{pos[[1]], 1.5}, newLife]]];

   Do[
      If[Norm[p[[1]] - pos] < 0.2, 
         newLife = newLife - 0.3;
      ];
   , {p, globalProjectiles}];

   Do[
      If[Norm[p["Target"] - pos] < 0.2, 
         Extract[p, {Key["Life"]}, decreaseLife]
      ];
   , {p, players}];   
   
   Enemy[pos + {0, -0.02}, newLife]
]

spawnEnemies[] := With[{propb = RandomReal[{0,1}]},
   If[propb > 0.95,
      globalEnemies = Append[globalEnemies, Enemy[{RandomReal[{-1,1}], 1.5}, 1]];
   ];
]


(* /**************************** Calculations *********************************/ *)

calculate := (
   time += 0.1;
   calculateProjectile[];
   calculateEnemies[];
   spawnEnemies[];
)

task = Null;
checkTask := Module[{},
   If[task === Null, 
      If[Length[Keys[players]] < 1, Return[]];
      task = SetInterval[calculate, 1000/50.]
   ,
      If[Length[Keys[players]] < 1, TaskRemove[task]; task = Null];
   ];
]


proximitySort[prev_, new_] := Module[{},
   new
]

(* /**************************** App *********************************/ *)

create[controls_] := Module[{
   target = {0,-1},
   life = 2.,
   score = 0,
   listener,
   enemies = {},
   projectiles = {},
   positions = {},
   gameEvents,
   delay = 5
},

   gameEvents = EventClone["game"];
   EventHandler[controls, {
      "Destroy" -> Function[cli,
         Echo["Widget removed!"];
         EventFire["game", "Remove player", <|"Client"->cli|>];
         EventRemove[gameEvents];
         checkTask;
      ],

      "Connected" -> Function[cli,
         EventHandler[gameEvents, {
            UpdatePositions -> Function[Null,
               positions = #["Target"] &/@ Values[players];
            ],

            UpdateProjectiles -> Function[Null,
               projectiles = proximitySort[projectiles, #[[1]] &/@ globalProjectiles];
            ],

            UpdateEnemies -> Function[Null,
               enemies = proximitySort[enemies, #[[1]] &/@ globalEnemies];
               If[life < 0, 
                  Close[cli];
               ];
            ]
         }];

         EventFire["game", "Add player", <|"Client"->cli, "Target":>target, "Life":>life, "Score":>score|>];
         checkTask;
      ]
   }]; 


   listener = {White, EventHandler[Rectangle[{-10, -10}, {10,10}], {
      "mousemove"->Function[xy, 
         target = xy;
         EventFire["game", UpdatePositions, Null];
         delay -= 1;
         If[delay < 0,
            globalProjectiles = Append[globalProjectiles,  Projectile[xy + {0, 0.05}, {RandomReal[{-0.03,0.03}], 0.15}, 2]];
            delay = 4;
         ];
      ]
   }]};



   Graphics[{
      listener, 
      {Green, Rectangle[{1,-1}, {1.1, Offload[life] - 1}]},
      {Blue, PointSize[0.1], Point @ Offload @ enemies},
      RGBColor[1.0 - 0.1764, 1.0 - 0.8313, 1.0 - 0.74901], Point[Offload @ projectiles],
      RGBColor[0.1764, 0.8313, 0.74901], PointSize[0.05], Point[Offload @ positions]
   }, TransitionDuration->1, TransitionType->"Linear", PlotRange->{{-1,1}, {-1,1}}]
];


(* /****************************** HTML Layout ***************************************/ *)

App[OptionsPattern[]] := With[{
   globalControls = OptionValue["Controls"],
   localControls  = CreateUUID[]
},
   With[{
      PlottingDevice = create[globalControls]
   },

      <div class="divide-y divide-gray-200 max-w-lg overflow-hidden rounded-lg bg-white shadow">
        <div class="px-2 py-2">
         <WLJS>
            <PlottingDevice/> 
         </WLJS>
        </div>
      </div>
   ]
]

App
